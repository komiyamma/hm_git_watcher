
jsmode "JScript\\" + currentmacrodirectory;

// abcdeff
js {


debuginfo(2);

var fso = createobject("Scripting.FileSystemObject");

var currentMacroDirectory = currentmacrodirectory();

var currentFileFullPath = hidemaru.getFileFullPath();

var intervalTickHandle = 0;

var gitDirProcess = null;

function destroyProcess(process) {
    if (process) {
        process.kill();
        process = null;
    }
}

function checkGitDirectory() {
    try {

        // gitのコマンドを発行して、対象のファイルがどこかのローカルリポジトリに所得しているのかを探す
        var currentFileDir = fso.GetParentFolderName(currentFileFullPath);
        gitDirProcess = hidemaru.runProcess("git rev-parse --absolute-git-dir", currentFileDir, "stdio", "utf8");

        // gitが無いんですが!!
        if (!gitDirProcess) {
            throw "git コマンドにパスが通っていません";

            // 非同期用の標準出力・標準エラーのコールバック関数の設定
        } else {
            gitDirProcess.stdOut.onReadAll(onStdOutReadAllGitDir);
            gitDirProcess.stdErr.onReadAll(onStdErrReadAllGitDir);
            gitDirProcess.onClose(onCloseGitDir)

        }

    } catch (e) {
        destroyProcess(gitDirProcess);
        console.log(e);
    }
}

var gitRootDir = "";

function onStdOutReadAllGitDir(outputText) {

    var gitDir = outputText.replace("\n", "");
    gitDir = gitDir.replace(/\//g, "\\");
    gitDir = fso.GetParentFolderName(gitDir);

    if (fso.FolderExists(gitDir)) {
        // console.log(gitDir);
        gitRootDir = gitDir.replace("\n", "");
        checkGitStatus();
        checkGitCherry();
    }
}

function onStdErrReadAllGitDir(outputText) {
}

function onCloseGitDir() {
    destroyProcess(gitDirProcess);
}

var gitStatusProcess = null;
function checkGitStatus() {
    try {
	    gitStatusProcess = hidemaru.runProcess("git status --porcelain", gitRootDir, "stdio", "utf8");
	    gitStatusProcess.stdOut.onReadAll(onStdOutReadAllGitStatus);
	    gitStatusProcess.stdErr.onReadAll(onStdErrReadAllGitStatus);
	    gitStatusProcess.onClose(onCloseGitStatus);
    } catch (e) {
        destroyProcess(gitStatusProcess);
        console.log(e);
    }
}

var gitStatusCount = 0;
function onStdOutReadAllGitStatus(outputText) {
    // console.log(outputText);
    var list = outputText.split("\n");
    if (list[list.length-1] == "") { 
        list.pop();
    }
    var count = list.length;
    gitStatusCount = count;
}

function onStdErrReadAllGitStatus(outputText) {
}

function onCloseGitStatus() {
    destroyProcess(gitStatusProcess);
}

var gitCherryProcess = null;
function checkGitCherry() {
    try {
	    // git branch --show-current
	    gitCherryProcess = hidemaru.runProcess("git cherry -v", gitRootDir, "stdio", "utf8");
	    gitCherryProcess.stdOut.onReadAll(onStdOutReadAllGitCherry);
	    gitCherryProcess.stdErr.onReadAll(onStdErrReadAllGitCherry);
	    gitCherryProcess.onClose(onCloseGitCherry);
    } catch (e) {
        destroyProcess(gitCherryProcess);
        console.log(e);
    }
}

var gitCherryCount = 0;
function onStdOutReadAllGitCherry(outputText) {
//    console.log(outputText);
    var list = outputText.split("\n");
    if (list[list.length-1] == "") { 
        list.pop();
    }
    var count = list.length;
/*
    console.log(JSON.stringify(list));
    console.log(count);
*/
    gitCherryCount = count;
}

function onStdErrReadAllGitCherry(outputText) {
}

function onCloseGitCherry() {
    destroyProcess(gitCherryProcess);
}

var limitCurCount = 0;
var limitMaxCount = 5;
function tickIntervalFunc() {
    if (limitCurCount < limitMaxCount) {
        if (limitCurCount == 1) {
            sendCommandToBrowser();
        }
        limitCurCount++;
        return;

    } else {
// console.log("=0");
        limitCurCount = 0;
    }

console.log("checkGitDirectory");
	checkGitDirectory();

}

var prevGitStatusCount = -1;
var prevGitCherryCount = -1;
function sendCommandToBrowser() {
    if (prevGitStatusCount != gitStatusCount ||
		prevGitCherryCount != gitCherryCount ) {
		console.log("送信");
		console.log(gitStatusCount);
		console.log(gitCherryCount);
    }

    prevGitStatusCount = gitStatusCount;
    prevGitCherryCount = gitCherryCount;

}

function resetIntervalTick() {
	if (intervalTickHandle) {
	    hidemaru.clearInterval(intervalTickHandle);
	    intervalTickHandle = 0;
	} else {
	    intervalTickHandle = hidemaru.setInterval(tickIntervalFunc, 1000);
	}
}

resetIntervalTick();

checkGitDirectory();




}
