/*
 * HmGitWatcher v1.0.0.1b
 *
 * Copyright (c) 2024 Akitsugu Komiyama
 * under the MIT License
 */

hidemaruversion "9.25.99";

// 無題スタートは対象外
if (filename2 == "") {
    endmacro;
}

jsmode @"JScript\HmGitWatcher";

execjs currentmacrodirectory + "\\HmGitWatcherButtonPushed.js";

execjs currentmacrodirectory + "\\HmGitWatcher100MBLimit.js";

js {

debuginfo(2);

// カレントマクロディレクトリはpostExecMacroMemoryなどしてしまうと拾うことが出来なくなるので、控えておく。
var currentMacroDirectory = currentmacrodirectory();
// レンダリングペイン名
var strRanderPaneName = "HmGitWatcher";
// 本当はグローバルにはしたくないが、グローバルにせざるを得ない。
var gRepoFullPath; // 初期化しないこと。非同期で使っているかもしれない。

// 前回マクロ実行した残骸が残ってるなら、ストップ
if (typeof gitWatcherComponent !== 'undefined') {
    gitWatcherComponent.Stop();
}

// 自動的に「現在のファイル」の「リポジトリの変化」や「リモートリポジトリとの変化」を監視し、変化があれば、JavaScriptの関数を呼び出す。
var gitWatcherComponent = createobject(currentMacroDirectory + "\\HmGitWatcher.comhost.dll", "{CD5AADB6-1A50-436F-85A1-84D72CFAECEB}");

function onGitReposFound(repoFullPath) {
    
    hidemaruversion("9.25.99"); // なぜかここに必要な模様。

    repoFullPath = repoFullPath.replace(/\//g, '\\');
    gRepoFullPath = repoFullPath;

    if (!repoFullPath) {
        // レンダリングペインは消してしまう
        closeRenderPane();
        return;
    }

    renderpanecommand({
        target: strRanderPaneName,
        show: 1,
        invisible: 0
    });

    hidemaru.setTimeout( function() {
        create100MBLimitPreCommitFile(repoFullPath);
    }, 0);
}

// この関数は「C#のdllの中」から「非同期」で呼び出される。(JavaScriptとして非同期で呼ばれる)
// 「ローカルリポジトリ」「リモートリポジトリ」との変化を検知した際に呼び出される。
function onGitStatusChange(repoFullPath, gitStatus, gitStatusPorchain, gitCherry) {

    hidemaruversion("9.25.99"); // なぜかここに必要な模様。

    repoFullPath = repoFullPath.replace(/\//g, '\\');
    gRepoFullPath = repoFullPath;

    // リポジトリに所属していないならば、
    if (!repoFullPath) {
        // レンダリングペインは消してしまう
        closeRenderPane();
        return;
    }

    // --------------------------------------------------------------------
    // プルする必要があるかどうかの判定
    // --------------------------------------------------------------------
    // derived(派生)している。(github上のコミット進行とローカルリポジトリのコミット進行が異なってしまっている)
    if (gitStatus.indexOf('use "git pull" to merge') !== -1) {
        gitStatus = 2;
    }
    // 普通にプル可能
    else if (gitStatus.indexOf('use "git pull" to update') !== -1) {
        gitStatus = 1;
    }
    // プルする必要はない
    else {
        gitStatus = 0;
    }

    // --------------------------------------------------------------------
    // コミット可能かどうかの判定
    // --------------------------------------------------------------------
    if (gitStatusPorchain) {
        gitStatusPorchain = 1;
    } else {
        gitStatusPorchain = 0;
    }

    // --------------------------------------------------------------------
    // プッシュ可能かどうかの判定
    // --------------------------------------------------------------------
    if (gitCherry) {
        gitCherry = 1;
    } else {
        gitCherry = 0;
    }

    function HtmlUpdate() {
        var readyState = renderpanecommand({ target: strRanderPaneName, get: "readyState" });

        if (readyState == "complete") {
            var jscommand = 'javascript:HmGitWatcher_Update(' + gitStatus + ',' + gitStatusPorchain + ',' + gitCherry + ');';
            renderpanecommand({
                target: strRanderPaneName,
                uri: jscommand,
                show: 1,
                invisible: 0
            });

            return true;
        }

        return false;
    }

    var htmlUpdated = HtmlUpdate();
    if (htmlUpdated) {
        return;
    }

    // アップデートに失敗している。レンダリングペインが何かの事情でComplete出来ていないのかもしれない。

    var retryCounter = 0; // リトライ回数。何かの事情でずっと更新できない場合に備えて、１秒おきで５回やってもダメだったら諦める。

    var updateRetry = hidemaru.setInterval(
        function () {
            if (htmlUpdated) {
                hidemaru.clearInterval(updateRetry);
                return;
            }

            if (retryCounter > 5) {
                writeOutputPane("レンダリングペイン更新時に不明なエラーが発生しました");
                return;
            }

            htmlUpdated = HtmlUpdate();
            retryCounter++;
        },
        1000
    );
}

// 監視コンポーネント・リスタート。
// リポジトリを発見したら「onGitReposFound」を呼び出す。  
// 変化を感じ取ったら「onGitStatusChange」関数を呼び出す。
gitWatcherComponent.ReStart(onGitReposFound, onGitStatusChange);



// レンダリングを閉じる
function closeRenderPane() {
    renderpanecommand({
        target: strRanderPaneName,
        invisible: 1,
        show: 0
    });
}

function getBGColor() {
    // BGR順 → RGB順とする。
    function convertBGRtoRGB(bgrColor) {
        var red = (bgrColor & 0xFF);         // 下位8ビットが青
        var green = (bgrColor >> 8) & 0xFF;  // 中位8ビットが緑
        var blue = (bgrColor >> 16) & 0xFF;  // 上位8ビットが赤

        return (red << 16) | (green << 8) | blue; // RGBの順番で結合
    }

    // 背景色を文字列化する
    var numBGColor = getconfigcolor(0, 1);
    numBGColor = convertBGRtoRGB(numBGColor);

    return sprintf("%06x", numBGColor);
}

function getHtmlUrl() {

    // HmGitWatcher.htmlを使ってボタンをレンダリング
    var urlFullPath = currentMacroDirectory + "\\HmGitWatcher.html";
    if (!existfile(urlFullPath)) {
        message(urlFullPath + "が存在しません")
    }
    // Windowsタイプのファイルの絶対パスを、URLタイプに。(WebView2の方ならあるが)JScriptだとこれがないため、.NETから関数を借りてくる
    if (gitWatcherComponent) {
    	urlFullPath = gitWatcherComponent.ConvertToUrl(urlFullPath);
    }

    return urlFullPath;
}


function openRenderPane() {

    var bgColor = getBGColor();

    var htmlUrl = getHtmlUrl();

    // ボタンが押された時の関数
    var callFuncId = hidemaru.getFunctionId(onButtonPushed);

    // funcIDとbgcolorを伝えながら、URLを開く
    var targetUrl = htmlUrl + '?callFuncId=' + callFuncId + '&bgColor=' + bgColor;

    //実行の順番(1)
    renderpanecommand({
        target: strRanderPaneName,
        show: 1,
        invisible: 1,
        uri: targetUrl,
        place: "overlay",
        align: "right",
        initialize: "async",
        x: 32,
        y: 26,
        cx: 36,
        cy: 140,
    });

}


openRenderPane();



// エラーメッセージ用
function writeOutputPane(msg) {
    if (msg === null) { return; }
    var dll = loaddll("HmOutputPane.dll");
    msg = msg.toString().replace(/\r\n/g, "\n").replace(/\n/g, "\r\n");
    dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), msg + "\r\n");
}


} // js

