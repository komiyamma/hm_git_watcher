hidemaruversion "9.25.99";

if (filename2 == "") {
    endmacro;
}

jsmode "JScript\\" + currentmacrofilename;

execjs currentmacrodirectory + "\\HmGitWatcherButtonPushed.js";


js {
debuginfo(2);

var currentMacroDirectory = currentmacrodirectory();

if (gitWatcherComponent) {
    gitWatcherComponent.Stop();
}
var strRanderPaneName="HmGitWatcher";


var gitWatcherComponent = createobject(currentmacrodirectory() + "\\HmGitWatcher.comhost.dll", "{CD5AADB6-1A50-436F-85A1-84D72CFAECEB}");
debuginfo(2);

var gRepoFullPath; // 初期化しないこと。非同期で使っているかもしれない。

// ローカルリポジトリ、もしくは、結びつけられたリモートリポジトリの変化を検知した
function onGitStatusChange(repoFullPath, gitStatus, gitStatusPorchain, gitCherry) {
console.log("あれ？");
hidemaruversion("9.25.99");
repoFullPath = repoFullPath.replace(/\//g, '\\');
gRepoFullPath = repoFullPath;

    if (repoFullPath == "") {
console.log("あれ？");
	    renderpanecommand({
	        target:strRanderPaneName,
	        show: 0
	        });

        return;
    }
    // derived
    if (gitStatus.indexOf('use "git pull" to merge') !== -1) {
        gitStatus = 2;
    }
    else if (gitStatus.indexOf('use "git pull" to update') !== -1) {
        gitStatus = 1;
    }
    else {
        gitStatus = 0;
    }

    if (gitStatusPorchain) {
        gitStatusPorchain = 1;
    } else {
        gitStatusPorchain = 0;
	}
    if (gitCherry) {
        gitCherry = 1;
    } else {
        gitCherry = 0;
    }

    function HtmlUpdate() {
	    var readyState = renderpanecommand({target:strRanderPaneName,get:"readyState"});

	    if( readyState == "complete" ) {
		    var jscommand = 'javascript:HmGitWatcher_Update('+gitStatus + ',' + gitStatusPorchain+','+gitCherry+');';
		    renderpanecommand({
		        target:strRanderPaneName,
		        uri:jscommand,
		        show: 1
		        });

            return true;
	    }

        return false;
    }

    var updated = HtmlUpdate();
    if (updated) {
        return;
    }

    // アップデートに失敗している。レンダリングペインが何かの事情でComplete出来ていないのかもしれない。

    var retryCounter = 0; // リトライ回数。何かの事情でずっと更新できない場合に備えて、５回やってもダメだったら諦める。

    var updateRetry = hidemaru.setInterval(
		function() {
	        if (updated) {
                hidemaru.clearInterval(updateRetry);
                return;
            }

            if (retryCounter > 5) {
                writeOutputPane("レンダリングペイン更新時に不明なエラーが発生しました");
                return;
            }

            updated = HtmlUpdate();
            retryCounter++;
	    },
        1000
    );
}

function bgrToRgb(bgrColor) {
  var red = (bgrColor & 0xFF);       // 下位8ビットが青
  var green = (bgrColor >> 8) & 0xFF; // 中位8ビットが緑
  var blue = (bgrColor >> 16) & 0xFF;  // 上位8ビットが赤

  return (red << 16) | (green << 8) | blue; // RGBの順番で結合
}

function filePathToUrl(fileFullPath) {
    if (gitWatcherComponent) {
        return gitWatcherComponent.ConvertToUrl(fileFullPath);
    }

    return filepath;
}

  
  function tickRenderPaneStatus(){
    var readyState = renderpanecommand({target:strRanderPaneName,get:"readyState"});
    console.log(readyState);
    if( readyState == "complete" ) {
      hidemaru.clearInterval(idInterval);
      onRenderPaneCompleted();
    }
  }
  
  function onRenderPaneCompleted() {
  }

  gitWatcherComponent.ReStart(onGitStatusChange);
  
  var bgcolor = getconfigcolor(0,1);
  bgcolor = bgrToRgb(bgcolor);
  bgcolor = sprintf("%06x", bgcolor)
  var urlFullPath = currentMacroDirectory + "\\HmGitWatcher.html";
  if (!existfile(urlFullPath)) {
      message(urlFullPath + "が存在しません")
  }

  var idCallBack_OnButtonPushed=hidemaru.getFunctionId(onButtonPushed);

  urlFullPath = filePathToUrl(urlFullPath);
  urlFullPath = urlFullPath + '?HmGitWatcher_onButtonPushed=' + idCallBack_OnButtonPushed + '&bgcolor=' + bgcolor;

  var curFileFullPath = hidemaru.getFileFullPath();

  var isShowed = renderpanecommand({
      target:strRanderPaneName,
      get: "show",
  });

console.log(urlFullPath);

  //実行の順番(1)
  renderpanecommand({
      target:strRanderPaneName,
      show:1,
      uri:urlFullPath,
      place:"overlay",
      align: "right",
      initialize: "async",
      x: 32,
      y: 26,
      cx: 36,
      cy: 140,
      });

  //実行の順番(2)
  var idInterval;
  if( typeof(idInterval)!="undefined" ) {
    hidemaru.clearInterval(idInterval);
  }
  idInterval = hidemaru.setInterval(tickRenderPaneStatus, 500);


// エラーメッセージ用
function writeOutputPane(msg) {
    if (msg === null) { return; }
    var dll = loaddll("HmOutputPane.dll");
    console.log("★" + typeof msg);
    msg = msg.toString().replace(/\r\n/g, "\n").replace(/\n/g, "\r\n");
    dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), msg + "\r\n");
}

} // js

