hidemaruversion "9.25.99";

jsmode @"JScript\HmGitWatcherVSCode";

js {

// VSCodeの絶対パスの設定。code.exe (もしくはcode.cmd)の場所を設定する。設定していない場合は一応自動で探す。例：@"C:\usr\vscode\code.exe"
var vscodeAbsolutePath = @"";


var currentMacroDirectory = currentmacrodirectory();

var fso = createobject("Scripting.FileSystemObject");

var gitRootDir = getarg(0);


// VSCodeのパスを探す
function getVSCodeAbsolutePath() {
    if (!vscodeAbsolutePath) {
        try {
            var success = openreg("CLASSESROOT", @"Applications\Code.exe\shell\open");
            if (success) {
                vscodeAbsolutePath = getregstr("Icon");
                vscodeAbsolutePath = vscodeAbsolutePath.replace(/"/g, '');
            }
        } finally {
            closereg();
        }
    }
    if (!vscodeAbsolutePath) {
        try {
            var success = openreg("CURRENTUSER", @"SOFTWARE\Classes\Applications\Code.exe\shell\open");
            if (success) {
                vscodeAbsolutePath = getregstr("Icon");
                vscodeAbsolutePath = vscodeAbsolutePath.replace(/"/g, '');
            }
        } finally {
            closereg();
        }
    }
    if (!vscodeAbsolutePath) {
        // Whereで見つかるようならzipか何かで展開しただけのものを、手動でパスを通しているのだろう。
        runex("where code.cmd", 1, 0, "", 0, "", 0, "", 0, "", 2, 0, 0, 0);
        // 発見したようだ。
        if (getresultex(9) == 0) {
            vscodeAbsolutePath = "code.cmd";
        }
    }
    if (!vscodeAbsolutePath) {
        // Whereで見つかるようならzipか何かで展開しただけのものを、手動でパスを通しているのだろう。
        runex("where code.exe", 1, 0, "", 0, "", 0, "", 0, "", 2, 0, 0, 0);
        // 発見したようだ。
        if (getresultex(9) == 0) {
            vscodeAbsolutePath = "code.exe";
        }
    }

    return vscodeAbsolutePath;
}



try {

    // VSCodeは、PCにちゃんと入っとるんか？
    vscodeAbsolutePath = getVSCodeAbsolutePath();

    // vscodeのパス自体が見つかってないか、パスは見つかったがそこにファイルが存在しない
    if (!vscodeAbsolutePath || !fso.FileExists(vscodeAbsolutePath)) {
        throw "Visual Studio Codeが発見できませんでした。\nマクロ「HmOpenVSCodeFromHidemaru.mac」を編集し、変数「VSCodeAbsoluePath」にVisual Studio Codeのパスを設定してください。";
    }

	var currentFileFullPath = hidemaru.getFileFullPath();

    if (currentFileFullPath) {

	    // VSCodeで開くカーソルポジションの取得
	    var cursorPos = calcCenterPosition();

        openVSCode(currentFileFullPath, cursorPos, gitRootDir);

    } else {
        // ファイル開いてないなら、VSCodeを本当に起動するだけ
        openVSCodeNoArgs();
    }

} catch (e) {
    message(e);
}



// 何も引数なしでVSCodeを実行するだけ
function openVSCodeNoArgs() {
    // 対象のファイルなし
    var command = sprintf(@"""%s"" ", vscodeAbsolutePath);
    openVSCodeCommand(command);
}


function getWorkSpaceDir(currentFileFullPath, gitRootDir) {
    var workSpaceDir = gitRootDir;

    // リポジトリが見つかっていなければ、現在のファイルのディレクトリをワークスペースとする
    if (!workSpaceDir) {
        var currentFileDir = fso.GetParentFolderName(currentFileFullPath);
        workSpaceDir = currentFileDir;
    }

    // 謎だが最後が「\」で終わっている場合、１つ「\」を付け加える必要がある。VSCodeの解釈の問題だろう
    if (workSpaceDir[workSpaceDir.length-1] == "\\") {
        workSpaceDir = workSpaceDir + "\\";
    }

    return workSpaceDir;
}

// 同期関数。VSCodeを指定のファイル、指定のディレクトリ(ワークスペース想定)、指定のポジションで開く
function openVSCode(currentFileFullPath, cursorPos, gitRootDir) {

    if (!vscodeAbsolutePath) { return; }

    // ファイルなし
    if (!currentFileFullPath) { return; }


    var workSpaceDir = getWorkSpaceDir(currentFileFullPath, gitRootDir);

    // gitRootDirが存在したのなら、gitビューモードへの移行が原則可能なハズ
    if (gitRootDir) {

        // ソースビューへと自動で移行。対象のリポジトリを作業場として、対象のファイルをunicodeベース換算でのlinenoとcolumn
        var command = sprintf("""
                              "%s" -n -g "%s" "%s:%d:%d" --extensionDevelopmentPath="%s"
                              """,
                              vscodeAbsolutePath, workSpaceDir, currentFileFullPath, cursorPos.lineno, cursorPos.column + 1, currentMacroDirectory + "\\vscode_extension");
    } else {

        // 対象のディレクトリを作業場として、対象のファイルをunicodeベース換算でのlinenoとcolumn
        var command = sprintf("""
                              "%s" -n -g "%s" "%s:%d:%d"
                              """,
                              vscodeAbsolutePath, workSpaceDir, currentFileFullPath, cursorPos.lineno, cursorPos.column + 1);
    }

    openVSCodeCommand(command);
}

function openVSCodeCommand(command) {
    runex(command
        , 0     //sync   0:async, 1:sync
        , 0, "" //stdin  0:none, 1:auto, 2:<file, 3:(reserved),
        //       4:current content, 5:selection
        , 0, "" //stdout 0:none, 1:auto, 2:>file 3:>>file, 4:new window,
        //       5:insert, 6:replace, 7:>output pane, 8:>>output pane
        , 0, "" //stderr 0:none, 1:auto or >>stdout, 2-8:same as stdout's param
        , 0, "" //folder 0:none, 1:current, 2:specify 3:(reserved), 4:exe's
        , 1     //show   0:auto, 1:show, 2:hide, 3-13:ShellExecute()'s SW_*
        , 0     //draw   0:draw, 1:no draw when stdout redirected
        , 0     //encode 0:ansi, 2:utf-16, 6:utf-8
        , 0     //extended flags
    );
}


// 秀丸上のカーソルが画面内ならば、そこと同じ場所をVSCodeでもカーソルの位置とする
// カーソルが画面外ならば、今秀丸で見えてる場所あたりをVSCodeで開く
function calcCenterPosition() {
    // 秀丸内で映っている画面の最初の行は、lineno換算（エディタ的）では何行目？
    var screenTopLineNo = ytolineno(0, screentopy());
    var linenoWCS = lineno();
    var columnWCS = column_wcs();

    // カーソルが画面からはみ出ているか？ （正確な判定をするにはあまりに迂遠なので、簡易判定）
    if (linenoWCS < screenTopLineNo || screenTopLineNo + windowheight() < linenoWCS) {
        // 画面外のカーソルの位置に移動するのは今ひとつなので、今秀丸で見てる場所に近しい画面になるように、当たりをつける。
        // 「13」は完全にマニュアルなマジックナンバーであるが、概ね今秀丸で見ているトップの行の「13行くらい下の行」を開くように Visual Studio Code に伝えると、そこを画面中央に配置しようとするのでいい感じになる。
        linenoWCS = screenTopLineNo + 13;
        columnWCS = 0;
    }

    return { "column": columnWCS, "lineno": linenoWCS }
}



} // js
